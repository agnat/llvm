//===-- AVRSubtarget.h - Define Subtarget for the AVR -----------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the AVR specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef __INCLUDE_AVRSUBTARGET_H__
#define __INCLUDE_AVRSUBTARGET_H__

#include "llvm/Target/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"

#define GET_SUBTARGETINFO_HEADER
#include "AVRGenSubtargetInfo.inc"

#include "AVRFrameLowering.h"
#include "AVRISelLowering.h"
#include "AVRInstrInfo.h"
#include "AVRSelectionDAGInfo.h"
#include "AVRSubtarget.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

namespace llvm
{

class StringRef;

class AVRSubtarget : public AVRGenSubtargetInfo
{
  virtual void anchor();
public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  AVRSubtarget(const std::string &TT, const std::string &CPU,
               const std::string &FS, AVRTargetMachine &TM);

  const AVRInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetFrameLowering *getFrameLowering() const override { return &FrameLowering; }
  const AVRTargetLowering *getTargetLowering() const override { return &TLInfo; }
  const AVRSelectionDAGInfo *getSelectionDAGInfo() const override { return &TSInfo; }
  const AVRRegisterInfo *getRegisterInfo() const override { return &InstrInfo.getRegisterInfo(); }

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options. Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool hasLPM() const { return this->HasLPM; }
  bool hasLPMX() const { return this->HasLPMX; }
  
  bool hasELPM() const { return this->HasELPM; }
  bool hasELPMX() const { return this->HasELPMX; }

  bool hasSPM() const { return this->HasSPM; }
  bool hasSPMX() const { return this->HasSPMX; }
  
  bool hasMUL() const { return this->HasMUL; }
  bool hasFMUL() const { return this->HasFMUL; }
  
  bool hasMOVW() const { return this->HasMOVW; }
  bool hasDES() const { return this->HasDES; }
  bool hasBREAK() const { return this->HasBREAK; }
  bool supportsRMW() const { return this->SupportsRMW; }
  
  bool hasSRAM() const { return this->HasSRAM; }
  bool hasEIND() const { return this->HasEIND; }

  bool isTiny() const { return this->IsTiny; }
  bool isMega() const { return this->IsMega; }

private:

  AVRInstrInfo InstrInfo;
  AVRFrameLowering FrameLowering;
  AVRTargetLowering TLInfo;
  AVRSelectionDAGInfo TSInfo;
  
  // Supported instructions
  bool HasLPM;
  bool HasLPMX;
  bool HasELPM;
  bool HasELPMX;
  bool HasSPM;
  bool HasSPMX;
  bool HasMUL;
  bool HasFMUL;
  bool HasMOVW;
  bool HasDES;
  bool HasBREAK;
  bool SupportsRMW;
  
  // Other features
  bool HasSRAM;
  bool HasEIND;
  bool IsTiny;
  bool IsMega;
  
  // Dummy feature value, used by PseudoSubtargetFeature.
  bool DummyFeature;
};

} // end namespace llvm

#endif //__INCLUDE_AVRSUBTARGET_H__
